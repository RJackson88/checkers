package jackson.rick.model.move;

/**
 * Created by rickjackson on 3/6/17.
 */
class OldMove {
    private int[][] moves = {
            {1, 0},
            {1, 1},
            {-1, -1},
            {-1, 0}
    };
    
    public int[] convertIndexToGridPosition(int index) {
        int[] p = {index / 4, index % 4};
        return p;
    }

    // public int[] southMoves(int i) {
    //     if (i < 0 || i > 27) {
    //         throw new IndexOutOfBoundsException();
    //     }
    //     int[] p;
    //
    //     if ((i / 4) % 2 == 0) {
    //         if ((i + 1) % 4 == 0) {
    //             p = new int[1];
    //             p[0] = i + 4;
    //             return p;
    //         } else {
    //             p = new int[2];
    //             p[0] = i + 4;
    //             p[1] = i + 5;
    //             return p;
    //         }
    //     } else {
    //         if (i % 4 == 0) {
    //             p = new int[1];
    //             p[0] = i + 5;
    //             return p;
    //         } else {
    //             p = new int[2];
    //             p[0] = i + 3;
    //             p[1] = i + 4;
    //             return p;
    //         }
    //     }
    // }

    // public int[] northMoves(int i) {
    //     if (i < 4 || i > 31) {
    //         throw new IndexOutOfBoundsException();
    //     }
    //     int[] p;
    //
    //     if ((i / 4) % 2 == 0) {
    //         if ((i + 1) % 4 == 0) {
    //             p = new int[1];
    //             p[0] = i - 4;
    //             return p;
    //         } else {
    //             p = new int[2];
    //             p[0] = i - 4;
    //             p[1] = i - 3;
    //             return p;
    //         }
    //     } else {
    //         if (i % 4 == 0) {
    //             p = new int[1];
    //             p[0] = i -4;
    //             return p;
    //         } else {
    //             p = new int[2];
    //             p[0] = i - 5;
    //             p[1] = i - 4;
    //             return p;
    //         }
    //     }
    // }
    
    /*
     * Black moves:
     *
     * 1 = 5, 6         [+4, +5]
     * 2 = 6, 7         [+4, +5]
     * 3 = 7, 8         [+4, +5]
     * 4 = 8            [+4,   ]
     * 5 = 9            [+4,   ]
     * 6 = 9, 10        [+3, +4]
     * 7 = 10, 11       [+3, +4]
     * 8 = 11, 12       [+3, +4]
     * 9 = 13, 14       [+4, +5]
     * 10 = 14, 15      [+4, +5]
     * 11 = 15, 16      [+4, +5]
     * 12 = 16          [+4    ]
     * 13 = 17          [+4    ]
     * 14 = 17, 18      [+3, +4]
     * 15 = 18, 19      [+3, +4]
     * 16 = 19, 20      [+3, +4]
     * 17 = 21, 22      [+4, +5]
     * 18 = 22, 23      [+4, +5]
     * 19 = 23, 24      [+4, +5]
     * 20 = 24          [+4    ]
     * 21 = 25          [+4    ]
     * 22 = 25, 26      [+3, +4]
     * 23 = 26, 27      [+3, +4]
     * 24 = 27, 28      [+3, +4]
     * 25 = 29, 30      [+4, +5]
     * 26 = 30, 31      [+4, +5]
     * 27 = 31, 32      [+4, +5]
     *
     *
     * x = index
     *
     * column = x / 4 % 2 =
     *
     *
     *
     * CHESSBOARD
     *
     *
     *  C   0    1    2    3    4    5    6    7
     * R +----+----+----+----+----+----+----+----+
     * 0 |[  ]|[ 1]|[  ]|[ 2]|[  ]|[ 3]|[  ]|[ 4]|
     *   +----+----+----+----+----+----+----+----+
     * 1 |[ 5]|[  ]|[ 6]|[  ]|[ 7]|[  ]|[ 8]|[  ]|
     *   +----+----+----+----+----+----+----+----+
     * 2 |[  ]|[ 9]|[  ]|[10]|[  ]|[11]|[  ]|[12]|
     *   +----+----+----+----+----+----+----+----+
     * 3 |[13]|[  ]|[14]|[  ]|[15]|[  ]|[16]|[  ]|
     *   +----+----+----+----+----+----+----+----+
     * 4 |[  ]|[17]|[  ]|[18]|[  ]|[19]|[  ]|[20]|
     *   +----+----+----+----+----+----+----+----+
     * 5 |[21]|[  ]|[22]|[  ]|[23]|[  ]|[24]|[  ]|
     *   +----+----+----+----+----+----+----+----+
     * 6 |[  ]|[25]|[  ]|[26]|[  ]|[27]|[  ]|[28]|
     *   +----+----+----+----+----+----+----+----+
     * 7 |[29]|[  ]|[30]|[  ]|[31]|[  ]|[32]|[  ]|
     *   +----+----+----+----+----+----+----+----+
     */
}
